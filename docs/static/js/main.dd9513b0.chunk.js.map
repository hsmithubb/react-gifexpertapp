{"version":3,"sources":["components/CategoryAdd.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","onClick","getGifs","category","a","url","encodeURI","fetch","peticion","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","setTimeout","then","imgs","console","log","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mNAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAyB9C,OACI,oCACI,0BAAMC,SAjBO,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OAGtCN,EAAc,OAUV,2BACIO,KAAK,OACLC,MAAOT,EACPU,SA3BU,SAACP,GAGvBF,EAAcE,EAAEQ,OAAOF,WA2BnB,4BAAQG,QAZF,WACVd,EAAc,MAWV,a,uBCjCCe,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,4DAEJ,mCACTC,EAHa,uDAEJ,mCAFI,cAGsDC,UAAUH,GAHhE,qBAIII,MAAMF,GAJV,cAIbG,EAJa,gBAKIA,EAASC,OALb,uBAKXC,EALW,EAKXA,KAGFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAEzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAbvB,kBAkBZM,GAlBY,4CAAH,sDCFPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEjC,OACI,yBAAKc,UAAU,8CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCHHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EAEZf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAwBtC,OAjBAC,qBAAU,WACNC,YAAW,WAEQzB,EAAQC,GAChByB,MAAK,SAAAC,GACRC,QAAQC,IAAIF,GACZJ,EAAS,CACLf,KAAMmB,EACNN,SAAS,SAIlB,OAGJ,CAACpB,IAEGqB,EDtB2BQ,CAAa7B,GAAjCa,EAFuB,EAE7BN,KAAca,EAFe,EAEfA,QAEtB,OACI,oCACI,wBAAIJ,UAAU,yCAAyChB,GACrDoB,GAAY,uBAAGJ,UAAU,oCAAb,cACd,yBAAKA,UAAU,aAEPH,EAAOJ,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eACIoB,IAAKpB,EAAIC,IACLD,UEWjBqB,EAxBM,WAAO,IAAD,EAEa9C,mBAAS,CAAC,kBAFvB,mBAEhB+C,EAFgB,KAEJhD,EAFI,KAIvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BAEQgD,EAAWvB,KAAI,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CACI8B,IAAK9B,EACLA,SAAUA,UCZtCiC,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.dd9513b0.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n\r\n        //console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n\r\n            setCategories(cats => [inputValue, ...cats]); /*Yo no tengo acceso a las categorias pq no se lo estoy\r\n            pasando como argumento. El setCategory se puede llamar con un callback que tiene el estado\r\n            anterior.*/\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n    const Clean = () => {\r\n        setCategories([]);\r\n    }\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleInputChange} />\r\n\r\n            </form>\r\n            <button onClick={Clean}>Limpiar</button>\r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n\r\n}\r\n\r\n","\r\n/*Como es async esta funcion no regresa los gifs, sino que regresa una promesa que resuelve\r\nla coleccion de mis imagenes*/\r\n\r\nexport const getGifs = async ( category ) => {\r\n\r\n    const apiKey = 'zqPuwKlADks0RbJ7tDyv8Z7KvcJQDSl1';\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${ encodeURI(category)}&limit=6`;\r\n    const peticion = await fetch(url);\r\n    const { data } = await peticion.json(); //extrae data de lo recibido de la peticion\r\n    //console.log(data)\r\n\r\n    const gifs = data.map(img => { // gifs es un array de objetos que contienen la informacion de la imagen\r\n\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n            // \"?\" si vienen las imagenes, entonces que utilice el downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title, url} ) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDown\">\r\n            <img src={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeInDown\">{category}</h3>\r\n            { loading  && <p className=\"animate__animated animate__flash\">Loading...</p> }\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />)\r\n                    )\r\n                }\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}","import { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n\r\n            const images = getGifs(category);// helpers que consigue los gifs\r\n            images.then(imgs => {\r\n                console.log(imgs);\r\n                setState({\r\n                    data: imgs, //[img1,img2... ] el estado almacena el arreglo de imagenes traidos de la promesa\r\n                    loading: false\r\n                })\r\n            });\r\n\r\n        }, 3000);\r\n\r\n\r\n    }, [category])\r\n\r\n    return state; // { data: [], loading: true}\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/CategoryAdd';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Dragon Ball Z']);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category} />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root') );\n\n\n\n"],"sourceRoot":""}